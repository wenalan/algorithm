// after reverse
// no space at beginning or ending
// no mulitple spaces between words


//==================================
// Java
//==================================

public class Solution {
    /**
     * @param s : A string
     * @return : A string
     */
    public String reverseWords(String s) {
        // write your code
        if (s == null || s.isEmpty()) return s;
        
        StringBuilder sb = new StringBuilder(s.trim());
        reverse(sb, 0, sb.length() - 1);
        
        int start = 0, end = 0;
        while (end < sb.length()) {
            while (end < sb.length() && sb.charAt(end) != ' ') end++;
            reverse(sb, start, end - 1);
            end++;
            while (end < sb.length() && sb.charAt(end) == ' ') {
                sb.deleteCharAt(end);
            }
            start = end;
        }
        return sb.toString();
    }
    
    public void reverse(StringBuilder sb, int i, int j) {
        while (i < j) {
            char temp = sb.charAt(i);
            sb.setCharAt(i, sb.charAt(j));
            sb.setCharAt(j, temp);
            i++;
            j--;
        }
    }
}



//==================================
// C++
//==================================

class Solution {
public:
    /**
     * @param s : A string
     * @return : A string
     */
    string reverseWords(string s) {
        // write your code here
        if (s.empty()) return s;
        
        trimright(s);
        reverse(s.begin(), s.end());
        trimright(s);
        
        int start = 0, end = 0;
        while (end < s.size()) {
            while (end < s.size() && s[end] != ' ') end++;
            rev(s, start, end - 1);
            end++;
            while (end < s.size() && s[end] == ' ') {
                s.erase(end, 1);
            }
            start = end;
        }
        return s;
    }
    
    void trimright(string &s) {
        if (s.empty()) return;
        
        int n = s.size() - 1;
        while (n >= 0 && s[n] == ' ') {
            s.erase(n--);
        }
    }
    
    void rev(string &s, int i, int j) {
        if (s.empty()) return;
        
        while (i < j) {
            swap(s[i++], s[j--]);
        }
    }
};



// Use STL

class Solution {
public:
    /**
     * @param s : A string
     * @return : A string
     */
    string reverseWords(string s) {
        // write your code here
        if (s.empty()) return s;

        // find_last_not_of return index
        s.erase(s.find_last_not_of(' ') + 1);
        reverse(s.begin(), s.end());
        s.erase(s.find_last_not_of(' ') + 1);
        if (s.empty()) return s;
        
        string::iterator start = s.begin(), end = s.begin();
        while (end < s.end()) {
            while (end < s.end() && *end != ' ') end++;
            reverse(start, end);
            end++;
            while (end < s.end() && *end == ' ') {
                s.erase(end);
            }
            start = end;
        }
        return s;
    }
};

