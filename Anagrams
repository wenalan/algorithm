//===============================
// Java
//===============================

public class Solution {
    /**
     * @param strs: A list of strings
     * @return: A list of strings
     */
    public List<String> anagrams(String[] strs) {
        // write your code here
        if (strs == null || strs.length == 0) return new ArrayList<String>();
        
        HashMap<String, Integer> hash = new HashMap<>();
        for (String s : strs) {
            char[] temp = s.toCharArray();
            Arrays.sort(temp);
            String key = new String(temp);
            if (hash.containsKey(key)) {
                hash.put(key, hash.get(key) + 1);
            } else {
                hash.put(key, 1);
            }
        }
        
        List<String> res = new ArrayList<>();
        for (String s : strs) {
            char[] temp = s.toCharArray();
            Arrays.sort(temp);
            String key = String.valueOf(temp);
            if (hash.get(key) > 1) {
                res.add(s);
            }
        }
        return res;
    }
}



//===============================
// C++
//===============================

class Solution {
public:    
    /**
     * @param strs: A list of strings
     * @return: A list of strings
     */
    vector<string> anagrams(vector<string> &strs) {
        // write your code here
        vector<string> res;
        if (strs.empty()) return res;
        
        unordered_map<string, int> hash;
        for (string s : strs) {
            sort(s.begin(), s.end());
            hash[s]++;
        }
        
        for (string s : strs) {
            string s2(s);
            sort(s.begin(), s.end());
            if (hash[s] > 1) {
                res.push_back(s2);
            }
        }
        return res;
    }
};
