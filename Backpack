//=================================
// Java
//=================================

public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    public int backPack(int m, int[] A) {
        // write your code here
        if (m <= 0) return 0;
        if (A == null || A.length == 0) return 0;
        
        int[][] dp = new int[A.length + 1][m + 1];
        
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < m; j++) {
                // must be j + 1 !
                if (A[i] > j + 1) {
                    dp[i + 1][j + 1] = dp[i][j + 1];
                } else {
                    dp[i + 1][j + 1] = Math.max(
                        A[i] + dp[i][j + 1 - A[i]],
                        dp[i][j + 1]);
                }
            }
        }
        return dp[A.length][m];
    }
}



//=================================
// C++
//=================================

class Solution {
public:
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    int backPack(int m, vector<int> A) {
        // write your code here
        if (m <= 0 || A.empty()) return 0;
        
        vector<vector<int>> dp(A.size() + 1, vector<int>(m + 1));
        for (int i = 1; i <= A.size(); i++) {
            for (int j = 1; j <= m; j++) {
                if (A[i - 1] <= j) {
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - A[i - 1]] + A[i - 1]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[A.size()][m];
    }
};
