// At most two transactions

//==============================
// C++
//==============================

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() < 2) return 0;
        
        vector<int> left(prices.size());
        int low = prices[0];
        for (int i = 1; i < prices.size(); i++) {
            left[i] = max(left[i - 1], prices[i] - low);
            if (prices[i] < low) low = prices[i];
        }
        
        vector<int> right(prices.size());
        int high = prices[prices.size() - 1];
        for (int i = prices.size() - 2; i >= 0; i--) {
            right[i] = max(right[i + 1], high - prices[i]);
            if (high < prices[i]) high = prices[i];
        }
        
        int res = 0;
        for (int i = 0; i < prices.size(); i++) {
            res = max(res, left[i] + right[i]);
        }
        return res;
    }
};
