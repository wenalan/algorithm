//=================================
// Java
//=================================

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
class Solution {
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    public String serialize(TreeNode root) {
        // write your code here
        StringBuilder out = new StringBuilder();
        ser(root, out);
        return out.toString();
    }
    
    private void ser(TreeNode root, StringBuilder out) {
        if (root == null) {
            out.append("# ");
        } else {
            out.append(String.valueOf(root.val) + " ");
            ser(root.left, out);
            ser(root.right, out);
        }
    }
    
    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    public TreeNode deserialize(String data) {
        // write your code here
        pos = 0;
        vals = data.split(" ");
        return des();
    }
    
    private int pos;
    private String[] vals;
    private TreeNode des() {
        if (vals[pos].equals("#")) {
            pos++;
            return null;
        }
        
        TreeNode root = new TreeNode(Integer.valueOf(vals[pos++]));
        root.left = des();
        root.right = des();
        return root;
    }
}



//=================================
// C++
//=================================

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    string serialize(TreeNode *root) {
        // write your code here
        ostringstream oss;
        ser(root, oss);
        return oss.str();
    }

    void ser(TreeNode *root, ostringstream &oss) {
        if (root == NULL) {
            oss << "# ";
        } else {
            oss << root->val << " ";
            ser(root->left, oss);
            ser(root->right, oss);
        }
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    TreeNode *deserialize(string data) {
        // write your code here
        istringstream iss(data);
        return des(iss);
    }
    
    TreeNode *des(istringstream &iss) {
        string s;
        iss >> s;
        if (s == "#") {
            return NULL;
        } else {
            TreeNode *root = new TreeNode(atoi(s.c_str()));
            root->left = des(iss);
            root->right = des(iss);
            return root;
        }
    }
};

