// use dp

public class Solution {
    /**
     * @param n: An integer
     * @return: An integer
     */
    public int climbStairs(int n) {
        // write your code here
        if (n <= 1) return 1;
        
        int[] dp = new int[n + 1];
        dp[0] = dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}


// use cache

public class Solution {
    
    private HashMap<Integer, Integer> cache = new HashMap<>();

    public int climbStairs(int n) {
    if (n <= 1) return 1;
        
        if (cache.containsKey(n)) return cache.get(n);

        int res = climbStairs(n - 1) + climbStairs(n - 2);
        cache.put(n, res);
        return res;
    }        
}
