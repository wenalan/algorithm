public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        if (candidates == null || candidates.length == 0) return res;
        
        // input must be sorted
        Arrays.sort(candidates);
        List<Integer> line = new ArrayList<>();
        comb(candidates, target, 0, line, res);
        return res;
    }
    
    public void comb(int[] can, int t, int pos,
            List<Integer> line, List<List<Integer>> res) {
        if (t < 0) return;
        
        if (t == 0) {
            // must make a copy of line
            res.add(new ArrayList<Integer>(line));
            return;
        }
        
        // need to remove repeated value
        int prev = -1;
        for (int i = pos; i < can.length; i++) {
            if (prev != -1 && prev == can[i]) continue;
            
            line.add(can[i]);
            comb(can, t - can[i], i, line, res);
            line.remove(line.size() - 1);
            
            prev = can[i];
        }
    }
}
