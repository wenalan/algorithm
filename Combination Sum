//=======================================
// Java
//=======================================

public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        if (candidates == null || candidates.length == 0) return res;
        
        // input must be sorted
        Arrays.sort(candidates);
        List<Integer> line = new ArrayList<>();
        comb(candidates, target, 0, line, res);
        return res;
    }
    
    public void comb(int[] can, int t, int pos,
            List<Integer> line, List<List<Integer>> res) {
        if (t < 0) return;
        
        if (t == 0) {
            // must make a copy of line
            res.add(new ArrayList<>(line));
            return;
        }
        
        // the input might include duplicated value, must be removed
        // otherwise it will generate duplicated line in result
        // which is not acceptable
        for (int i = pos; i < can.length; i++) {
            if (i != 0 && can[i] == can[i - 1]) continue;
            
            line.add(can[i]);
            comb(can, t - can[i], i, line, res);
            line.remove(line.size() - 1);
        }
    }
}



//=======================================
// C++
//=======================================

class Solution {
public:
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        // write your code here 
        vector<vector<int>> res;
        if (candidates.empty()) return res;
        
        sort(candidates.begin(), candidates.end());
        vector<int> line;
        comb(candidates, target, 0, line, res);
        return res;
    }
    
    void comb(vector<int> &can, int target, int pos, vector<int> &line, 
            vector<vector<int>> &res) {
        // must exit if target < 0, otherwise too many recursions
        if (target < 0) return;
        
        if (target == 0) {
            res.push_back(line);
            return;
        }
        
        // if there is no repeated element in can
        // prev can be removed
        int prev = 0;
        for (int i = pos; i < can.size(); i++) {
            if (i != pos && can[i] == prev) continue;
            
            line.push_back(can[i]);
            comb(can, target - can[i], i, line, res);
            line.pop_back();
            
            prev = can[i];
        }
    }
};
