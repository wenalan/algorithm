/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        if (head == null) return null;
        
        HashMap<RandomListNode, RandomListNode> map = new HashMap<>();
        RandomListNode curr = head;
        
        // don't forget to use dummy node for copyed list
        RandomListNode head2 = new RandomListNode(0);
        RandomListNode curr2 = head2;
        while (curr != null) {
            curr2.next = new RandomListNode(curr.label);
            map.put(curr, curr2.next);
            curr = curr.next;
            curr2 = curr2.next;
        }
        
        curr = head;
        curr2 = head2.next;
        while (curr != null) {
            if (curr.random != null) {
                curr2.random = map.get(curr.random);
            }
            curr = curr.next;
            curr2 = curr2.next;
        }
        
        return head2.next;
    }
}
