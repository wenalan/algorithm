// alias Find median from data stream

public class Solution {
    
    private Comparator<Integer> myComp = new Comparator<Integer>() {
        public int compare(Integer a, Integer b) {
            return b - a;
        }
    };

    // private PriorityQueue<Integer> maxHeap = new PriorityQueue<>(100, myComp);
    // private PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    
    private PriorityQueue<Integer> maxHeap;
    private PriorityQueue<Integer> minHeap;
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) return new int[0];
        maxHeap = new PriorityQueue<>(nums.length, myComp);
        minHeap = new PriorityQueue<>();
        
        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            maxHeap.offer(nums[i]);
            minHeap.offer(maxHeap.poll());
            if (maxHeap.size() < minHeap.size()) {
                maxHeap.offer(minHeap.poll());
            }
            res[i] = maxHeap.peek();
        }
        return res;
    }
}


// Define comparator inline
public class Solution {
    PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    PriorityQueue<Integer> maxHeap = new PriorityQueue<>(10, 
        new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
                return b - a;
        }});
    
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) return null;
        
        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            res[i] = getMedian(nums[i]);
        }
        return res;
    }
    
    public int getMedian(int i) {
        maxHeap.offer(i);
        minHeap.offer(maxHeap.poll());
        if (maxHeap.size() < minHeap.size()) {
            maxHeap.offer(minHeap.poll());
        }
        return maxHeap.peek();
    }
}

// Just use negative value to avoid comparator definition
// by default PriorityQueue is minHeap, which the first value is smallest.
public class Solution {
    PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    PriorityQueue<Integer> maxHeap = new PriorityQueue<>();
    
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) return null;
        
        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            res[i] = getMedian(nums[i]);
        }
        return res;
    }
    
    public int getMedian(int i) {
        maxHeap.offer(-i);
        minHeap.offer(-maxHeap.poll());
        if (maxHeap.size() < minHeap.size()) {
            maxHeap.offer(-minHeap.poll());
        }
        return -maxHeap.peek();
    }
}
