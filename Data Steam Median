//=====================================
// Java
//=====================================

// alias Find median from data stream

// Define comparator inline

public class Solution {
    private PriorityQueue<Integer> minHeap;
    private PriorityQueue<Integer> maxHeap;
    
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if (nums == null) return null;
        if (nums.length == 0) return new int[0];
        
        minHeap = new PriorityQueue<>();
        maxHeap = new PriorityQueue<>(nums.length / 2 + 1,
            new Comparator<Integer>() {
                public int compare(Integer a, Integer b) {
                    return b - a;
                }
            });
        int[] res = new int[nums.length];
        
        for (int i = 0; i < nums.length; i++) {
            maxHeap.offer(nums[i]);
            minHeap.offer(maxHeap.poll());
            if (maxHeap.size() < minHeap.size()) {
                maxHeap.offer(minHeap.poll());
            }
            res[i] = maxHeap.peek();
        }
        return res;
    }
}




// Define comparator outside

public class Solution {
    
    private Comparator<Integer> myComp = new Comparator<Integer>() {
        public int compare(Integer a, Integer b) {
            return b - a;
        }
    };

    // private PriorityQueue<Integer> maxHeap = new PriorityQueue<>(100, myComp);
    // private PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    
    private PriorityQueue<Integer> maxHeap;
    private PriorityQueue<Integer> minHeap;
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) return new int[0];
        maxHeap = new PriorityQueue<>(nums.length, myComp);
        minHeap = new PriorityQueue<>();
        
        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            maxHeap.offer(nums[i]);
            minHeap.offer(maxHeap.poll());
            if (maxHeap.size() < minHeap.size()) {
                maxHeap.offer(minHeap.poll());
            }
            res[i] = maxHeap.peek();
        }
        return res;
    }
}



// Just use negative value to avoid comparator definition
// by default PriorityQueue is minHeap, which the first value is smallest.
public class Solution {
    PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    PriorityQueue<Integer> maxHeap = new PriorityQueue<>();
    
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) return null;
        
        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            res[i] = getMedian(nums[i]);
        }
        return res;
    }
    
    public int getMedian(int i) {
        maxHeap.offer(-i);
        minHeap.offer(-maxHeap.poll());
        if (maxHeap.size() < minHeap.size()) {
            maxHeap.offer(-minHeap.poll());
        }
        return -maxHeap.peek();
    }
}



//=====================================
// C++
//=====================================

class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: The median of numbers
     */
    vector<int> medianII(vector<int> &nums) {
        // write your code here
        vector<int> res;
        if (nums.empty()) return res;
        
        for (int n : nums) {
            res.push_back(medianII(n));
        }
        return res;
    }
    
    priority_queue<int> max_heap;
    priority_queue<int, vector<int>, greater<int>> min_heap;
    
    int medianII(int n) {
        max_heap.push(n);
        min_heap.push(max_heap.top());
        max_heap.pop();
        
        if (max_heap.size() < min_heap.size()) {
            max_heap.push(min_heap.top());
            min_heap.pop();
        }
        return max_heap.top();
    }
};
