//===============================
// Java
//===============================

public class Solution {
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    public int numDistinct(String S, String T) {
        // write your code here
        if (T == null || T.length() == 0) return 1;
        if (S == null || S.length() == 0) return 0;
        if (T.length() > S.length()) return 0;
        
        int[][] dp = new int[T.length() + 1][S.length() + 1];
        for (int i = 0; i <= S.length(); i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i <= T.length(); i++) {
            dp[i][0] = 0;
        }
        
        for (int i = 1; i <= T.length(); i++) {
            for (int j = 1; j <= S.length(); j++) {
                if (T.charAt(i - 1) != S.charAt(j - 1)) {
                    dp[i][j] = dp[i][j - 1];
                } else {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1];
                }
            }
        }
        return dp[T.length()][S.length()];
    }
}



//===============================
// C++
//===============================

class Solution {
public:    
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    int numDistinct(string &S, string &T) {
        // write your code here
        if (T.empty()) return true;
        if (S.empty()) return false;
        
        vector<vector<int>> dp(T.size() + 1, vector<int>(S.size() + 1));
        for (int i = 0; i <= S.size(); i++) {
            dp[0][i] = 1;
        }
        
        for (int i = 1; i <= T.size(); i++) {
            for (int j = 1; j <= S.size(); j++) {
                dp[i][j] = dp[i][j - 1];
                if (T[i - 1] == S[j - 1]) {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        
        return dp[T.size()][S.size()];
    }
};
