//===================================
// Java
//===================================

public class Solution {
    /**
     * @param word1 & word2: Two string.
     * @return: The minimum number of steps.
     */
    public int minDistance(String word1, String word2) {
        // write your code here
        if (word1 == null && word2 == null) return 0;
        if (word1 == null) return word2.length();
        if (word2 == null) return word1.length();

        // length check can be skipped
        // as the for loop can process 0 without any problem
        if (word1.length() == 0 && word2.length() == 0) return 0;
        if (word1.length() == 0) return word2.length();
        if (word2.length() == 0) return word1.length();
        
        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
        for (int i = 0; i < word1.length(); i++) {
            dp[i + 1][0] = i + 1;
        }
        for (int j = 0; j < word2.length(); j++) {
            dp[0][j + 1] = j + 1;
        }
        
        for (int i = 0; i < word1.length(); i++) {
            for (int j = 0; j < word2.length(); j++) {
                if (word1.charAt(i) == word2.charAt(j)) {
                    dp[i + 1][j + 1] = dp[i][j];
                } else {
                    dp[i + 1][j + 1] = Math.min(dp[i][j + 1], dp[i + 1][j]);
                    dp[i + 1][j + 1] = 1 + Math.min(dp[i + 1][j + 1], dp[i][j]);
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}


//===================================
// C++
//===================================

class Solution {
public:    
    /**
     * @param word1 & word2: Two string.
     * @return: The minimum number of steps.
     */
    int minDistance(string word1, string word2) {
        // write your code here
        if (word1.empty() && word2.empty()) return 0;
        if (word1.empty()) return word2.size();
        if (word2.empty()) return word1.size();
        
        vector<vector<int>> dp(word2.size() + 1, vector<int>(word1.size() + 1));
        for (int i = 1; i <= word1.size(); i++) {
            dp[0][i] = i;
        }
        for (int i = 1; i <= word2.size(); i++) {
            dp[i][0] = i;
        }
        
        for (int i = 1; i <= word2.size(); i++) {
            for (int j = 1; j <= word1.size(); j++) {
                if (word1[j - 1] == word2[i - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]);
                    dp[i][j] = 1 + min(dp[i][j], dp[i - 1][j - 1]);
                }
            }
        }
        return dp[word2.size()][word1.size()];
    }
};
