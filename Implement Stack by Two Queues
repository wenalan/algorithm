// heavy work at push()
// seemed better

class Stack {
    private Queue<Integer> q1 = new LinkedList<>();
    private Queue<Integer> q2 = new LinkedList<>();

    // Push a new item into the stack
    public void push(int x) {
        // Write your code here
        if (q1.isEmpty()) {
            q1.offer(x);
            while (!q2.isEmpty()) {
                q1.offer(q2.poll());
            }
        } else {
            q2.offer(x);
            while (!q1.isEmpty()) {
                q2.offer(q1.poll());
            }
        }
    }

    // Pop the top of the stack
    public void pop() {
        // Write your code here
        if (q1.isEmpty()) {
            q2.poll();
        } else {
            q1.poll();
        }
    }

    // Return the top of the stack
    public int top() {
        // Write your code here
        if (q1.isEmpty()) {
            return q2.peek();
        } else {
            return q1.peek();
        }
    }

    // Check the stack is empty or not.
    public boolean isEmpty() {
        // Write your code here
        return q1.isEmpty() && q2.isEmpty();
    }    
}



// heavy work at pop()

class Stack {
    private Queue<Integer> q1 = new LinkedList<>();
    private Queue<Integer> q2 = new LinkedList<>();
    private int peek;
    
    // Push a new item into the stack
    public void push(int x) {
        // Write your code here
        if (q1.isEmpty()) {
            q2.offer(x);
        } else {
            q1.offer(x);
        }
        peek = x;
    }

    // Pop the top of the stack
    public void pop() {
        // Write your code here
        if (q1.isEmpty()) {
          while (q2.size() > 1) {
              peek = q2.poll();
              q1.offer(peek);
          }  
          q2.poll();
        } else {
            while (q1.size() > 1) {
                peek = q1.poll();
                q2.offer(peek);
            }
            q1.poll();
        }
    }

    // Return the top of the stack
    public int top() {
        // Write your code here
        if (!isEmpty()) {
            return peek;
        } else {
            return -1;
        }
    }

    // Check the stack is empty or not.
    public boolean isEmpty() {
        // Write your code here
        return q1.isEmpty() && q2.isEmpty();
    }    
}

