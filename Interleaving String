public class Solution {
    /**
    * Determine whether s3 is formed by interleaving of s1 and s2.
    * @param s1, s2, s3: As description.
    * @return: true or false.
    */
    public boolean isInterleave(String s1, String s2, String s3) {
        // write your code here
        if (s1 == null && s2 == null && s3 == null) return true;
        if (s1 == null) return s2.equals(s3);
        if (s2 == null) return s1.equals(s3);
        if (s3 == null) return false;
        
        if (s1.length() == 0 && s2.length() == 0 && s3.length() == 0) return true;
        if (s1.length() + s2.length() != s3.length()) return false;
        
        boolean[][] dp = new boolean[s1.length() + 1][s2.length() + 1];
        dp[0][0] = true;
        for (int i = 0; i < s1.length(); i++) {
            dp[i + 1][0] = ((s1.charAt(i) == s3.charAt(i)) ? dp[i][0] : false);
        }
        for (int j = 0; j < s2.length(); j++) {
            dp[0][j + 1] = ((s2.charAt(j) == s3.charAt(j)) ? dp[0][j] : false);
        }
        
        for (int i = 0; i < s1.length(); i++) {
            for (int j = 0; j < s2.length(); j++) {
                if (s3.charAt(i + j + 1) == s1.charAt(i) &&
                        s3.charAt(i + j + 1) == s2.charAt(j)) {
                    dp[i + 1][j + 1] = dp[i][j + 1] || dp[i + 1][j];
                } else if (s3.charAt(i + j + 1) == s1.charAt(i)) {
                    dp[i + 1][j + 1] = dp[i][j + 1];
                } else if (s3.charAt(i + j + 1) == s2.charAt(j)) {
                    dp[i + 1][j + 1] = dp[i + 1][j];
                } else {
                    dp[i + 1][j + 1] = false;
                }
            }
        }
        
        return dp[s1.length()][s2.length()];
    }
}
