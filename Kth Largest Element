//================================
// Java
//================================

class Solution {
    /*
     * @param k : description of k
     * @param nums : array of nums
     * @return: description of return
     */
    public int kthLargestElement(int k, int[] nums) {
        // write your code here
        if (nums == null || nums.length < 0) return -1;
        if (k <= 0 || k > nums.length) return -1;
        
        // change K to index
        return kth(nums.length - k, nums, 0, nums.length - 1);
    }
    
    public int kth(int target, int[] nums, int start, int end) {
        if (start > end) return -1;
        
        int pos = start + 1;
        for (int i = start + 1; i <= end; i++) {
            if (nums[i] <= nums[start]) {
                swap(nums, i, pos++);
            }
        }
        pos--; // adjust pos
        swap(nums, start, pos);
        
        if (target == pos) return nums[pos];
        else if (pos < target) return kth(target, nums, pos + 1, end);
        else return kth(target, nums, start, pos - 1);
    }
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
};


//================================
// C++
//================================

class Solution {
public:
    /*
     * param k : description of k
     * param nums : description of array and index 0 ~ n-1
     * return: description of return
     */
    int kthLargestElement(int k, vector<int> nums) {
        // write your code here
        if (nums.empty()) return -1;
        if (k <= 0 || k > nums.size()) return -1;
        
        return partition(nums.size() - k, nums, 0, nums.size() - 1);
    }
    
    int partition(int target, vector<int> &nums, int start, int end) {
        if (start > end) return -1;
        
        int pos = start + 1;
        for (int i = start + 1; i <= end; i++) {
            if (nums[i] < nums[start]) {
                swap(nums[i], nums[pos++]);
            }
        }
        swap(nums[--pos], nums[start]);
        
        if (pos == target) {
            return nums[target];
        } else if (pos < target ) {
            return partition(target, nums, pos + 1, end);
        } else {
            return partition(target, nums, start, pos - 1);
        }
    }
};
