// use dummy head and tail

public class Solution {
    private class Node {
        int key;
        int value;
        Node prev;
        Node next;

        public Node(int key, int value) {
            this.key = key;
            this.value = value;
            prev = next = null;
        }
    }
    private HashMap<Integer, Node> hash = new HashMap<>();
    private Node head = new Node(-1, -1);
    private Node tail = new Node(-1, -1);
    private int capacity;

    // @param capacity, an integer
    public Solution(int capacity) {
        // write your code here
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }

    // @return an integer
    public int get(int key) {
        // write your code here
        if (!hash.containsKey(key)) {
            return -1;
        }

        Node curr = hash.get(key);
        curr.prev.next = curr.next;
        curr.next.prev = curr.prev;

        curr.prev = tail.prev;
        curr.next = tail;
        tail.prev.next = curr;
        tail.prev = curr;

        return tail.prev.value;
    }

    // @param key, an integer
    // @param value, an integer
    // @return nothing
    public void set(int key, int value) {
        // write your code here
        if (get(key) != -1) {
            tail.prev.value = value;
            return;
        }

        if (hash.size() >= capacity) {
            // use key to remove hash item!
            hash.remove(head.next.key);
            head.next = head.next.next;
            head.next.prev = head;
        }

        Node node = new Node(key, value);
        node.prev = tail.prev;
        node.next = tail;
        tail.prev.next = node;
        tail.prev = node;
        hash.put(key, node);
    }
}
