//=================================
// Java
//=================================

public class Solution {
    /**
     * @param A, B: Two strings.
     * @return: The length of longest common subsequence of A and B.
     */
    public int longestCommonSubsequence(String A, String B) {
        // write your code here
        if (A == null || B == null || A.length() == 0 || B.length() == 0) {
            return 0;
        }
        
        int[][] dp = new int[A.length() + 1][B.length() + 1];
        for (int i = 1; i <= A.length(); i++) {
            for (int j = 1; j <= B.length(); j++) {
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i][j - 1], dp[i -1][j]);
                }
            }
        }
        return dp[A.length()][B.length()];
    }
}


//=================================
// C++
//=================================

class Solution {
public:
    /**
     * @param A, B: Two strings.
     * @return: The length of longest common subsequence of A and B.
     */
    int longestCommonSubsequence(string A, string B) {
        // write your code here
        if (A.empty() || B.empty()) return 0;

        vector<vector<int>> dp(B.size() + 1, vector<int>(A.size() + 1));
        for (int i = 1; i <= B.size(); i++) {
            for (int j = 1; j <= A.size(); j++) {
                // C++
                if (A[j - 1] == B[i - 1]) {
                
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1]);
                }
            }
        }
        return dp[B.size()][A.size()];
    }
};
