class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public List<List<Integer>> permuteUnique(int[] nums) {
        // Write your code here
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null) return res;
        if (nums.length == 0) {
            res.add(new ArrayList<Integer>());
            return res;
        }
        
        // sorting to make sure the same value are adjacent
        Arrays.sort(nums);
        List<Integer> line = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        permute(nums, visited, line, res);
        return res;
    } 
    
    public void permute(int[] nums, boolean[] visited, List<Integer> line,
            List<List<Integer>> res) {
        if (line.size() == nums.length) {
            res.add(new ArrayList<>(line));
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            // use index as key, but not the value!
            // if the value at specified index is visited
            // we will not use it again, skip it then
            if (visited[i]) continue;
            
            // although this index is not visited
            // but it contains repeated value
            // will skipt it if previous index is not visited either!
            if (i != 0 && nums[i] == nums[i - 1] && !visited[i - 1])
                continue;
                
            line.add(nums[i]);
            visited[i] = true;
            permute(nums, visited, line, res);
            line.remove(line.size() - 1);
            visited[i] = false;
        }
    }
}


