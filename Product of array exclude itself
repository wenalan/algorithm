//===================================
// Java
//===================================

public class Solution {
    /**
     * @param A: Given an integers array A
     * @return: A Long array B and B[i]= A[0] * ... * A[i-1] * A[i+1] * ... * A[n-1]
     */
    public ArrayList<Long> productExcludeItself(ArrayList<Integer> A) {
        // write your code
        ArrayList<Long> res = new ArrayList<>();
        if (A == null || A.isEmpty()) return res;
        
        // don't forget to add extra L for type Long
        res.add(1L);
        for (int i = 1; i < A.size(); i++) {
            res.add(res.get(i - 1) * A.get(i - 1));
        }
        
        Long right = 1L;
        for (int i = A.size() - 2; i >= 0; i--) {
            right *= A.get(i + 1);
            res.set(i, res.get(i) * right);
        }
        return res;
    }
}



//===================================
// C++
//===================================

class Solution {
public:
    /**
     * @param A: Given an integers array A
     * @return: A long long array B and B[i]= A[0] * ... * A[i-1] * A[i+1] * ... * A[n-1]
     */
    vector<long long> productExcludeItself(vector<int> &nums) {
        // write your code here
        if (nums.empty()) return vector<long long>();
        
        vector<long long> res(nums.size());
        res[0] = 1;
        for (int i = 1; i < nums.size(); i++) {
            res[i] = res[i - 1] * nums[i - 1];
        }
        
        long long right = 1;
        for (int i = nums.size() - 2; i >= 0; i--) {
            right *= nums[i + 1];
            res[i] *= right;
        }
        return res;
    }
};


// paritially use STL style in vector

class Solution {
public:
    /**
     * @param A: Given an integers array A
     * @return: A long long array B and B[i]= A[0] * ... * A[i-1] * A[i+1] * ... * A[n-1]
     */
    vector<long long> productExcludeItself(vector<int> &nums) {
        // write your code here
        vector<long long> res;
        if (nums.empty()) return res;

        res.push_back(1);
        for (int i = 1; i < nums.size(); i++) {
            res.push_back(res.back() * nums[i - 1]);
        }
        
        long long right = 1;
        for (int i = nums.size() - 2; i >= 0; i--) {
            right *= nums[i + 1];
            res[i] *= right;
        }
        return res;
    }
};
