/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: void
     */
    public void reorderList(ListNode head) {  
        // write your code here
        if (head == null || head.next == null) return;
        
        ListNode mid = findMid(head);
        ListNode right = mid.next;
        mid.next = null;
        
        right = reverse(right);
        head = merge(head, right);
    }
    
    private ListNode findMid(ListNode head) {
        ListNode fast = head.next;
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    private ListNode merge(ListNode left, ListNode right) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        while (left != null && right != null) {
            curr.next = left;
            curr = curr.next;
            left = left.next;
            
            // left.next is changed after setting curr.next
            // thus it must be moved first
            curr.next = right;
            curr = curr.next;
            right = right.next;
        }
        
        if (left != null) curr.next = left;
        else curr.next = right;
        
        return dummy.next;
    }
}
