/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param ListNode head is the head of the linked list 
     * @oaram m and n
     * @return: The head of the reversed ListNode
     */
    public ListNode reverseBetween(ListNode head, int m , int n) {
        // write your code
        if (head == null || head.next == null) return head;
        
        int len = 0;
        ListNode curr = head;
        while (curr != null) {
            curr = curr.next;
            len++;
        }
        if (m < 1 || n < 1 || m > n || m > len || n > len) return head;
        
        ListNode dummy = new ListNode(0);
        curr = dummy;
        curr.next = head;
        // i = 1, stopped before node M
        for (int i = 1; i < m; i++) {
            curr = curr.next;
        }
        
        ListNode prevM = curr;
        curr = curr.next;
        ListNode nodeM = curr;
        ListNode prev = null;
        ListNode next = null;
        // i <= n, adjust every next point of [m, n] nodes
        for (int i = m; i <= n; i++) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        prevM.next = prev;
        nodeM.next = next;
        
        return dummy.next;
    }
}
