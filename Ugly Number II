//===================================
// Java
//===================================

class Solution {
    /**
     * @param n an integer
     * @return the nth prime number as description.
     */
    public int nthUglyNumber(int n) {
        // Write your code here
        if (n <= 0) return -1;

        int[] ugly = new int[n];
        ugly[0] = 1;
        
        int i = 1, i2 = 0, i3 = 0, i5 = 0;
        while (i < n) {
            int next = Math.min(ugly[i2] * 2, ugly[i3] * 3);
            next = Math.min(next, ugly[i5] * 5);
            ugly[i++] = next;
            
            if (ugly[i2] * 2 == next) i2++;
            if (ugly[i3] * 3 == next) i3++;
            if (ugly[i5] * 5 == next) i5++;
        }
        return ugly[n - 1];
    }
};



//===================================
// C++
//===================================

class Solution {
public:
    /*
     * @param n an integer
     * @return the nth prime number as description.
     */
    int nthUglyNumber(int n) {
        // write your code here
        if (n <= 0) return 0;
        
        vector<int> ugly(n);
        ugly[0] = 1;
        int i = 0, i2 = 0, i3 = 0, i5 = 0;
        while (i < n - 1) {
            int next = min(ugly[i2] * 2, ugly[i3] * 3);
            next = min(next, ugly[i5] * 5);
            if (ugly[i2] * 2 == next) i2++;
            if (ugly[i3] * 3 == next) i3++;
            if (ugly[i5] * 5 == next) i5++;
            ugly[++i] = next;
        }
        return ugly[n - 1];
    }
};



// use min_element()

class Solution {
public:
    /*
     * @param n an integer
     * @return the nth prime number as description.
     */
    int nthUglyNumber(int n) {
        // write your code here
        if (n <= 0) return 0;
        
        vector<int> ugly(n);
        ugly[0] = 1;
        int i = 0, i2 = 0, i3 = 0, i5 = 0;
        while (i < n - 1) {
            vector<int> v = {ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5};
            vector<int>::iterator it =  min_element(v.begin(), v.end());
            if (ugly[i2] * 2 == *it) i2++;
            if (ugly[i3] * 3 == *it) i3++;
            if (ugly[i5] * 5 == *it) i5++;
            ugly[++i] = *it;
        }
        return ugly[n - 1];
    }
};
