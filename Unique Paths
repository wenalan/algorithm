// use dp

public class Solution {
    /**
     * @param n, m: positive integer (1 <= n ,m <= 100)
     * @return an integer
     */
    public int uniquePaths(int m, int n) {
        // write your code here 
        if (m <= 0 || n <= 0) return 0;
        
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            dp[i][0] = 1;
        }
        for (int i = 0; i < n; i++) {
            dp[0][i] =1;
        }
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
}


// direct calculation

import java.math.*;

public class Solution {
    /**
     * @param n, m: positive integer (1 <= n ,m <= 100)
     * @return an integer
     */
    public int uniquePaths(int m, int n) {
        // write your code here 
        if (m <= 0 || n <= 0) return 0;
        
        // dimention does not euqals to the length of path!
        return comb(m + n - 2, n - 1);
    }

    public int comb(int m, int n) {
        BigInteger res = factorial(m).divide(factorial(n));
        res = res.divide(factorial(m - n));
        return Integer.parseInt(res.toString());
        // or 
        // return res.intValue();
    }

    public BigInteger factorial(int n) {
        BigInteger res = new BigInteger("1");
        for (int i = 1; i <= n; i++) {
            res = res.multiply(BigInteger.valueOf(i));
        }
        return res;
    }    
}

