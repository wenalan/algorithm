//=============================
// C++
//=============================

// use recursion

class Solution {
public:
    /**
     * @param s: A string s
     * @param dict: A dictionary of words dict
     */
    bool wordBreak(string s, unordered_set<string> &dict) {
        // empty string can be breaked by empty dict
        if (s.empty() && dict.empty()) return true;
        if (s.empty()) return true;
        if (dict.empty()) return false;
        
        for (auto word : dict) {
            // don't forget to skip the case of empty word!
            if (word.empty()) continue;
            
            if (s.find(word) == 0 && wordBreak(s.substr(word.size()), dict)) {
                // only return when recursion return true
                // but not directly return the result of recursion!
                return true;
            }
        }
        return false;
    }
};


/*
use dp

use the following test case to help remember the process
pay attention at position ^

 01234567
 testword
TFFFT
01234
    ^
*/

class Solution {
public:
    /**
     * @param s: A string s
     * @param dict: A dictionary of words dict
     */
    bool wordBreak(string s, unordered_set<string> &dict) {
        // write your code here
        if (s.empty()) return true;
        if (dict.empty() return false;
        
        vector<bool> dp(s.size() + 1);
        dp[0] = true;
        
        // treat i, j as both pointers for the string s
        // only need to do conversion when used on vector dp
        // by using this methods, caculating index made simple
        for (int i = 0; i < s.size(); i++) {
            for (int j = i; j >= 0; j--) {
                if (dp[j] && dict.count(s.substr(j, i - j + 1))) {
                    dp[i + 1] = true;
                    break;
                }
            }
        }
        return dp[s.size()];
    }
};




//=============================
// Java
//=============================

// use recursion
public wordBreak(String s, Set<String> dict) {
  if (s == null || s.isEmpty()) return true;

  for (String word : dict) {
    if (word.isEmpty()) continue;

    if (s.startsWith(word) && wordBreak(s.substring(word.length()), dict)
      return true;
  }
  return false;
}


// use dp
public class Solution {
    /**
     * @param s: A string s
     * @param dict: A dictionary of words dict
     */
    public boolean wordBreak(String s, Set<String> dict) {
        // write your code here 
        if (s == null || s.isEmpty()) return true;
        
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        
        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j >= 0; j--) {
                if (dp[j] && dict.contains(s.substring(j, i + 1))) {
                    dp[i + 1] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}

