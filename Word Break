// use recursion
public wordBreak(String s, Set<String> dict) {
  if (s == null || s.isEmpty()) return true;

  for (String word : dict) {
    if (word.isEmpty()) continue;

    if (s.startsWith(word) && wordBreak(s.substring(word.length()), dict)
      return true;
  }
  return false;
}


// use dp
public class Solution {
    /**
     * @param s: A string s
     * @param dict: A dictionary of words dict
     */
    public boolean wordBreak(String s, Set<String> dict) {
        // write your code here 
        if (s == null || s.isEmpty()) return true;
        
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        
        for (int i = 1; i <= s.length(); i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (dp[j] == true && dict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}
