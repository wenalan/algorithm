public class Solution {
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return an integer
      */
    public int ladderLength(String start, String end, Set<String> dict) {
        // write your code here
        if (start == null || end == null || dict == null) return 0;
        if (start.length() == 0 || end.length() == 0 || dict.size() == 0)
            return 0;
        if (start.length() != end.length()) return 0;
        
        if (start.equals(end)) return 1;
        
        int count = 1;
        Queue<String> q = new LinkedList<>();
        HashSet<String> visited = new HashSet<>();

        q.offer(start);
        visited.add(start);
        while (!q.isEmpty()) {
            int k = q.size();
            for (int j = 0; j < k; j++) {
                String currWord = q.poll();
                String nextWord;
                for (int i = 0; i < currWord.length(); i++) {
                    for (char c = 'a'; c <= 'z'; c++) {
                        nextWord = currWord.substring(0, i) + String.valueOf(c)
                            + currWord.substring(i + 1);
                            
                        if (nextWord.equals(end)) {
                            return count + 1;
                        }    
                        
                        if (dict.contains(nextWord) && !visited.contains(nextWord)) {
                            visited.add(nextWord);
                            q.offer(nextWord);
                        }
                    }
                }
            }
            count++;
        }
        return 0;
    }
}
