// dict does not contains string end!

//=================================
// C++
//=================================

class Solution {
public:
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return an integer
      */
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // write your code here
        if (start.size() != end.size()) return 0;
        if (start.empty() || dict.empty()) return 0;
        
        unordered_set<string> visited;
        visited.insert(start);
        
        // store depth info inside the queue node
        // otherwise, can use level traversal, but need extra for loop
        queue<pair<string, int>> q;
        q.push(make_pair(start, 1));    
        if (start == end) return 1;
        
        while (!q.empty()) {
            pair<string, int> node = q.front();
            q.pop();
            
            for (int i = 0; i < start.size(); i++) {
                string next(node.first);
                for (char c = 'a'; c <= 'z'; c++) {
                    next[i] = c;    // C++ can modify string directly
                    
                    // dict does not contain string end
                    if (next == end) return node.second + 1;
            
                    // No need to check if next == node.first
                    // since node.first is visited already, will be skipped
                    if (dict.count(next) && visited.count(next) == 0) {
                        visited.insert(next);
                        q.push(make_pair(next, node.second + 1));
                    }
                }
            }
        }
        return 0;
    }
};




//=================================
// Java
//=================================

// cleaner code, but need more extra working spaces

public class Solution {
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return an integer
      */
    public int ladderLength(String start, String end, Set<String> dict) {
        // write your code here
        if (start == null || end == null || dict == null) return 0;
        if (start.length() == 0 || end.length() == 0 || dict.size() == 0)
            return 0;
        if (start.length() != end.length()) return 0;
        if (start.equals(end)) return 1;
        
        Queue<String> q = new LinkedList<>();
        HashSet<String> visited = new HashSet<>();
        q.offer(start);
        visited.add(start);
        int count = 1;
        while (!q.isEmpty()) {
            count++;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                String curr = q.poll();
                for (String word : getNextWords(curr)) {
                    if (word.equals(end)) return count;
                    
                    if (dict.contains(word) && !visited.contains(word)) {
                        visited.add(word);
                        q.offer(word);
                    }
                }
            }
        }
        return 0;
    }
    
    public ArrayList<String> getNextWords(String curr) {
        ArrayList<String> nextWords = new ArrayList<>();
        for (int i = 0; i < curr.length(); i++) {
            for (char c = 'a'; c <= 'z'; c++) {
                nextWords.add(curr.substring(0, i) + c +
                    curr.substring(i + 1));
            }
        }
        return nextWords;
    }
}

//===========================================================
public class Solution {
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return an integer
      */
    public int ladderLength(String start, String end, Set<String> dict) {
        // write your code here
        if (start == null || end == null || dict == null) return 0;
        if (start.length() == 0 || end.length() == 0 || dict.size() == 0)
            return 0;
        if (start.length() != end.length()) return 0;
        
        if (start.equals(end)) return 1;
        
        int count = 1;
        Queue<String> q = new LinkedList<>();
        HashSet<String> visited = new HashSet<>();

        q.offer(start);
        visited.add(start);
        while (!q.isEmpty()) {
            int k = q.size();
            for (int j = 0; j < k; j++) {
                String currWord = q.poll();
                String nextWord;
                for (int i = 0; i < currWord.length(); i++) {
                    for (char c = 'a'; c <= 'z'; c++) {
                        nextWord = currWord.substring(0, i) + String.valueOf(c)
                            + currWord.substring(i + 1);
                            
                        if (nextWord.equals(end)) {
                            return count + 1;
                        }    
                        
                        if (dict.contains(nextWord) && !visited.contains(nextWord)) {
                            visited.add(nextWord);
                            q.offer(nextWord);
                        }
                    }
                }
            }
            count++;
        }
        return 0;
    }
}
